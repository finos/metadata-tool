(ns metadata-tool.tools.github_reports
  (:require [clojure.string                 :as str]
            [clojure.data.json              :as json]
            [clojure.walk                   :as wlk]
            [clojure.java.io                :as io]
            [clojure.pprint                 :as pp]
            [metadata-tool.sources.github   :as gh]))

(def notice-finos-terms "This product includes software developed at the Fintech Open Source Foundation - https://www.finos.org")

(def finos-github-orgs ["finos" "finos-plexus" "HadoukenIO" "symphonyoss"])

(def contributing-header "# contributing")

(def license-header "# license")

(def message-header
  (str "This is a message generated by the FINOS metadata-tool.\n\n"
       "We have found some repository configurations that should be changed in order to comply with FINOS Governance and bylaws, see the details below.\n\nList of fixes:\n"))

(def message-footer
  (str "If you think that some of these checks don't apply, you can create a `.finos-blueprint.json` file in your project root folder, as follows:\n"
       "```\n"
       "{"
       "  \"ignore\" : ["
       "    \"no-issue-templates\","
       "    \"readme-nok \""
       "  ]"
       "}"
       "```\n\n"
       "For any question, do not hesitate to contact @finos-staff or email [help@finos.org](mailto:help@finos.org). Thank you!"))

(def messages 
  {:has-admin "One or more admin collaborators were found in this GitHub repository.. FINOS Governance doesn't allow GitHub users to have Admin rights on repositories, therefore it must be removed."
   :has-user "One or more user collaborators were found in this GitHub repository. FINOS Governance only allows GitHub users to be added via Teams. Please remove it, therefore it must be removed."
   :no-teams "This GitHub repository does not grant permissions to any FINOS Team, although it should be configured to grant access to the program and project specific teams defined in [https://github.com/orgs/finos/teams](https://github.com/orgs/finos/teams). Please email help@finos.org and coordinate changes to the repository access permissions."
   :no-issues "This GitHub repository does not have GitHub Issues enabled; make sure that there is a documented way to submit questions, feature requests and other communications to the project team."
   :no-issue-templates "This GitHub repository does not use issue templates; please check the [issue template blueprints](https://github.com/finos/project-blueprint/tree/master/.github/ISSUE_TEMPLATE)."
   :no-contributing "CONTRIBUTING.md file is missing; check the [CONTRIBUTING.md template](https://github.com/finos/project-blueprint/blob/master/.github/CONTRIBUTING.md)."
   :no-code-conduct "CODE_OF_CONDUCT.md file is missing; check the [CODE_OF_CONDUCT.md template](https://github.com/finos/project-blueprint/blob/master/.github/CODE_OF_CONDUCT.md)."
   :notice-nok "NOTICE file is incomplete; check the [NOTICE template](https://github.com/finos/project-blueprint/blob/master/NOTICE)."
   :no-notice "NOTICE file is missing; check the [NOTICE template](https://github.com/finos/project-blueprint/blob/master/NOTICE)."
   :no-readme "README file is missing; check the [README.md template](https://github.com/finos/project-blueprint/blob/master/README.template.md)."
   :readme-nok "README.md file is incomplete; check the [README.md template](https://github.com/finos/project-blueprint/blob/master/README.template.md) and make sure that `## Contributing` and `## License` sections exist."
   :no-whitesource "WhiteSource configuration was not found; make sure that dependencies are scanned against security vulnerabilities. Read more on [the WhiteSource Wiki page](https://finosfoundation.atlassian.net/wiki/spaces/FDX/pages/75530440/WhiteSource)."})

(defn- get-config
  "Returns the config object, or nil, if string is empty"
  [config]
  (if (str/blank? config)
    nil
    (json/read-str config)))

(defn- check-non-archived-repo
  "Returns validation for a given repo-name"
  [org repo-url repo]
  (let [repo-name       (last (str/split repo-url #"/"))
        collaborators   (gh/collaborators repo-url "direct")
        teams           (gh/teams repo-url)
        has-admin       (not (empty? 
                              (filter #(:admin (:permissions %)) 
                                      collaborators)))
        has-user        (not (empty? 
                              (filter #(= "User" (:type %)) 
                                      collaborators)))
      ;;   Useful for debugging purposes
      ;;   config          (get-config
      ;;                    "{ \"ignore\" : [\"has-user\"]}")
        config          (get-config 
                         (gh/content org repo-name ".finos-blueprint.json"))
        notice          (gh/content org repo-name "NOTICE")
        readme          (gh/content org repo-name "README.md")
        issue-templates (gh/folder org repo-name ".github/ISSUE_TEMPLATE")
        contributing    (gh/content org repo-name ".github/CONTRIBUTING.md")
        code-conduct    (gh/content org repo-name ".github/CODE_OF_CONDUCT.md")
        ws-config       (gh/content org repo-name ".whitesource")
        readme-content  (str/lower-case readme)
        validations     {:has-admin          has-admin
                         :has-user           has-user
                         :no-notice          (empty? notice)
                         :no-readme          (empty? readme)
                         :no-teams           (empty? teams)
                         :no-issues          (not (:has_issues repo))
                         :no-issue-templates (empty? issue-templates)
                         :no-contributing    (empty? contributing)
                         :no-code-conduct    (empty? code-conduct)
                         :no-description     (str/blank? (:description repo))
                         :no-whitesource     (empty? ws-config)
                         :notice-nok         (and (not (empty? notice))
                                                  (not (str/includes?
                                                        notice
                                                        notice-finos-terms)))
                         :readme-nok         (and (not (empty? readme))
                                                  (or
                                                   (not (str/includes?
                                                         readme-content
                                                         contributing-header))
                                                   (not (str/includes?
                                                         readme-content
                                                         license-header))))}]
    {:url (str "https://github.com/" org "/" repo-name)
     :org org
     :repo-name repo-name
     :ignore (get config "ignore")
     :validations validations}))

(defn- check-repo
  "Returns validation for a given repo-name"
  [org repo-url]
(let [repo (gh/repo repo-url)
      archived (:archived repo)]
  (if (not archived)
    (check-non-archived-repo org repo-url repo))))

(defn- generate-msg
  "Returns the final message for a given repo"
  [messages]
  (str message-header
       (str/join "\n" messages)
       "\n\n"
       message-footer))

(defn- generate-msg-item
  "Returns a validation message item"
  [messages item]
  (let [key (first item)
        msg (get (wlk/stringify-keys messages) key)]
    (str "- [ ] `" key "` - " msg)))

(defn- add-msgs
  "Attaches a list of messages for each validation item"
  [repo-validation]
  (let [validations (wlk/stringify-keys (:validations repo-validation))
        filtered    (apply dissoc validations (:ignore repo-validation))
        fixes       (filter #(second %) (seq filtered))
        msgs        (map #(generate-msg-item messages %) fixes)]
    (assoc repo-validation :message (generate-msg msgs))))

(defn- check-org
  "Returns validation for a given org"
  [org]
  (let [url       (str "https://github.com/" org)
      ;;   repo-urls [(first (gh/repos-urls url))]]
        repo-urls (gh/repos-urls url)]
    (flatten (map #(add-msgs (check-repo org %)) repo-urls))))

(defn check-repos
  "Returns validation for all public repos across all FINOS orgs"
  []
  (let [orgs finos-github-orgs
        validated-repos (mapcat #(check-org %) orgs)]
    (with-open [wrtr (io/writer "finos-repo-validation.json")]
      (.write wrtr (json/write-str validated-repos)))))
